#include <stdio.h>

#define TAM_TABULEIRO 10
#define TAM_NAVIO 3
#define TAM_HABILIDADE 5

// Função para inicializar o tabuleiro com água (0)
void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            tabuleiro[i][j] = 0;
        }
    }
}

// Função para imprimir o tabuleiro
void imprimirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Função para posicionar um navio horizontalmente
void posicionarNavioHorizontal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        if (coluna + i < TAM_TABULEIRO) {
            tabuleiro[linha][coluna + i] = 3;
        }
    }
}

// Função para posicionar um navio verticalmente
void posicionarNavioVertical(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        if (linha + i < TAM_TABULEIRO) {
            tabuleiro[linha + i][coluna] = 3;
        }
    }
}

// Função para posicionar navio diagonal (principal ou secundária)
void posicionarNavioDiagonal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna, int principal) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        int lin = linha + i;
        int col = principal ? (coluna + i) : (coluna - i);
        if (lin < TAM_TABULEIRO && col >= 0 && col < TAM_TABULEIRO) {
            tabuleiro[lin][col] = 3;
        }
    }
}

// Função para aplicar uma matriz de habilidade (cone, cruz ou octaedro)
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int habilidade[TAM_HABILIDADE][TAM_HABILIDADE], int origem_linha, int origem_coluna) {
    int offset = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            int lin = origem_linha + i - offset;
            int col = origem_coluna + j - offset;

            if (lin >= 0 && lin < TAM_TABULEIRO && col >= 0 && col < TAM_TABULEIRO && habilidade[i][j] == 1) {
                if (tabuleiro[lin][col] == 0) {
                    tabuleiro[lin][col] = 5;
                }
            }
        }
    }
}

// Função para construir matriz em forma de cone
void construirCone(int cone[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (j >= TAM_HABILIDADE/2 - i && j <= TAM_HABILIDADE/2 + i) {
                cone[i][j] = 1;
            } else {
                cone[i][j] = 0;
            }
        }
    }
}

// Função para construir matriz em forma de cruz
void construirCruz(int cruz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (i == TAM_HABILIDADE/2 || j == TAM_HABILIDADE/2) {
                cruz[i][j] = 1;
            } else {
                cruz[i][j] = 0;
            }
        }
    }
}

// Função para construir matriz em forma de octaedro (losango)
void construirOctaedro(int octaedro[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (abs(i - TAM_HABILIDADE/2) + abs(j - TAM_HABILIDADE/2) <= TAM_HABILIDADE/2) {
                octaedro[i][j] = 1;
            } else {
                octaedro[i][j] = 0;
            }
        }
    }
}

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO];
    inicializarTabuleiro(tabuleiro);

    // Posicionando os navios
    posicionarNavioHorizontal(tabuleiro, 1, 1);
    posicionarNavioVertical(tabuleiro, 3, 5);
    posicionarNavioDiagonal(tabuleiro, 6, 2, 1); // diagonal principal
    posicionarNavioDiagonal(tabuleiro, 0, 9, 0); // diagonal secundária

    // Matrizes das habilidades
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    construirCone(cone);
    construirCruz(cruz);
    construirOctaedro(octaedro);

    // Aplicar habilidades ao tabuleiro
    aplicarHabilidade(tabuleiro, cone, 5, 5);
    aplicarHabilidade(tabuleiro, cruz, 2, 2);
    aplicarHabilidade(tabuleiro, octaedro, 8, 8);

    // Imprimir resultado final
    printf("Tabuleiro Final:\n\n");
    imprimirTabuleiro(tabuleiro);

    return 0;
}
